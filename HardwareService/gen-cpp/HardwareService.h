/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HardwareService_H
#define HardwareService_H

#include <thrift/TDispatchProcessor.h>
#include "HardwareService_types.h"

namespace Tabletochki {

class HardwareServiceIf {
 public:
  virtual ~HardwareServiceIf() {}
  virtual void configure(const std::string& jsonDocumentText) = 0;
  virtual void pour(const Container::type from, const Container::type to) = 0;
  virtual void getInput(HardwareInput& _return) = 0;
  virtual void startPump(const int32_t pumpId) = 0;
  virtual void stopPump(StopPumpResult& _return, const int32_t pumpId) = 0;
  virtual void getServiceStatus(ServiceStatus& _return) = 0;
  virtual void ping(const int32_t arg) = 0;
};

class HardwareServiceIfFactory {
 public:
  typedef HardwareServiceIf Handler;

  virtual ~HardwareServiceIfFactory() {}

  virtual HardwareServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HardwareServiceIf* /* handler */) = 0;
};

class HardwareServiceIfSingletonFactory : virtual public HardwareServiceIfFactory {
 public:
  HardwareServiceIfSingletonFactory(const boost::shared_ptr<HardwareServiceIf>& iface) : iface_(iface) {}
  virtual ~HardwareServiceIfSingletonFactory() {}

  virtual HardwareServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HardwareServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HardwareServiceIf> iface_;
};

class HardwareServiceNull : virtual public HardwareServiceIf {
 public:
  virtual ~HardwareServiceNull() {}
  void configure(const std::string& /* jsonDocumentText */) {
    return;
  }
  void pour(const Container::type /* from */, const Container::type /* to */) {
    return;
  }
  void getInput(HardwareInput& /* _return */) {
    return;
  }
  void startPump(const int32_t /* pumpId */) {
    return;
  }
  void stopPump(StopPumpResult& /* _return */, const int32_t /* pumpId */) {
    return;
  }
  void getServiceStatus(ServiceStatus& /* _return */) {
    return;
  }
  void ping(const int32_t /* arg */) {
    return;
  }
};

typedef struct _HardwareService_configure_args__isset {
  _HardwareService_configure_args__isset() : jsonDocumentText(false) {}
  bool jsonDocumentText :1;
} _HardwareService_configure_args__isset;

class HardwareService_configure_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  HardwareService_configure_args(const HardwareService_configure_args&);
  HardwareService_configure_args& operator=(const HardwareService_configure_args&);
  HardwareService_configure_args() : jsonDocumentText() {
  }

  virtual ~HardwareService_configure_args() throw();
  std::string jsonDocumentText;

  _HardwareService_configure_args__isset __isset;

  void __set_jsonDocumentText(const std::string& val);

  bool operator == (const HardwareService_configure_args & rhs) const
  {
    if (!(jsonDocumentText == rhs.jsonDocumentText))
      return false;
    return true;
  }
  bool operator != (const HardwareService_configure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_configure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_configure_args& obj);
};


class HardwareService_configure_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~HardwareService_configure_pargs() throw();
  const std::string* jsonDocumentText;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_configure_pargs& obj);
};

typedef struct _HardwareService_configure_result__isset {
  _HardwareService_configure_result__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_configure_result__isset;

class HardwareService_configure_result {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};

  HardwareService_configure_result(const HardwareService_configure_result&);
  HardwareService_configure_result& operator=(const HardwareService_configure_result&);
  HardwareService_configure_result() {
  }

  virtual ~HardwareService_configure_result() throw();
  InvalidOperation ouch;

  _HardwareService_configure_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_configure_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_configure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_configure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_configure_result& obj);
};

typedef struct _HardwareService_configure_presult__isset {
  _HardwareService_configure_presult__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_configure_presult__isset;

class HardwareService_configure_presult {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};


  virtual ~HardwareService_configure_presult() throw();
  InvalidOperation ouch;

  _HardwareService_configure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_configure_presult& obj);
};

typedef struct _HardwareService_pour_args__isset {
  _HardwareService_pour_args__isset() : from(false), to(false) {}
  bool from :1;
  bool to :1;
} _HardwareService_pour_args__isset;

class HardwareService_pour_args {
 public:

  static const char* ascii_fingerprint; // = "69EF77542FBF7A8DD68310C9FF3B44BD";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0xEF,0x77,0x54,0x2F,0xBF,0x7A,0x8D,0xD6,0x83,0x10,0xC9,0xFF,0x3B,0x44,0xBD};

  HardwareService_pour_args(const HardwareService_pour_args&);
  HardwareService_pour_args& operator=(const HardwareService_pour_args&);
  HardwareService_pour_args() : from((Container::type)0), to((Container::type)0) {
  }

  virtual ~HardwareService_pour_args() throw();
  Container::type from;
  Container::type to;

  _HardwareService_pour_args__isset __isset;

  void __set_from(const Container::type val);

  void __set_to(const Container::type val);

  bool operator == (const HardwareService_pour_args & rhs) const
  {
    if (!(from == rhs.from))
      return false;
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const HardwareService_pour_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_pour_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_pour_args& obj);
};


class HardwareService_pour_pargs {
 public:

  static const char* ascii_fingerprint; // = "69EF77542FBF7A8DD68310C9FF3B44BD";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0xEF,0x77,0x54,0x2F,0xBF,0x7A,0x8D,0xD6,0x83,0x10,0xC9,0xFF,0x3B,0x44,0xBD};


  virtual ~HardwareService_pour_pargs() throw();
  const Container::type* from;
  const Container::type* to;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_pour_pargs& obj);
};

typedef struct _HardwareService_pour_result__isset {
  _HardwareService_pour_result__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_pour_result__isset;

class HardwareService_pour_result {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};

  HardwareService_pour_result(const HardwareService_pour_result&);
  HardwareService_pour_result& operator=(const HardwareService_pour_result&);
  HardwareService_pour_result() {
  }

  virtual ~HardwareService_pour_result() throw();
  InvalidOperation ouch;

  _HardwareService_pour_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_pour_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_pour_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_pour_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_pour_result& obj);
};

typedef struct _HardwareService_pour_presult__isset {
  _HardwareService_pour_presult__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_pour_presult__isset;

class HardwareService_pour_presult {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};


  virtual ~HardwareService_pour_presult() throw();
  InvalidOperation ouch;

  _HardwareService_pour_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_pour_presult& obj);
};


class HardwareService_getInput_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HardwareService_getInput_args(const HardwareService_getInput_args&);
  HardwareService_getInput_args& operator=(const HardwareService_getInput_args&);
  HardwareService_getInput_args() {
  }

  virtual ~HardwareService_getInput_args() throw();

  bool operator == (const HardwareService_getInput_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HardwareService_getInput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getInput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getInput_args& obj);
};


class HardwareService_getInput_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HardwareService_getInput_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getInput_pargs& obj);
};

typedef struct _HardwareService_getInput_result__isset {
  _HardwareService_getInput_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _HardwareService_getInput_result__isset;

class HardwareService_getInput_result {
 public:

  static const char* ascii_fingerprint; // = "D5AC64616352116A03D8E6BA8250FEF9";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0xAC,0x64,0x61,0x63,0x52,0x11,0x6A,0x03,0xD8,0xE6,0xBA,0x82,0x50,0xFE,0xF9};

  HardwareService_getInput_result(const HardwareService_getInput_result&);
  HardwareService_getInput_result& operator=(const HardwareService_getInput_result&);
  HardwareService_getInput_result() {
  }

  virtual ~HardwareService_getInput_result() throw();
  HardwareInput success;
  InvalidOperation ouch;

  _HardwareService_getInput_result__isset __isset;

  void __set_success(const HardwareInput& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_getInput_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_getInput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getInput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getInput_result& obj);
};

typedef struct _HardwareService_getInput_presult__isset {
  _HardwareService_getInput_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _HardwareService_getInput_presult__isset;

class HardwareService_getInput_presult {
 public:

  static const char* ascii_fingerprint; // = "D5AC64616352116A03D8E6BA8250FEF9";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0xAC,0x64,0x61,0x63,0x52,0x11,0x6A,0x03,0xD8,0xE6,0xBA,0x82,0x50,0xFE,0xF9};


  virtual ~HardwareService_getInput_presult() throw();
  HardwareInput* success;
  InvalidOperation ouch;

  _HardwareService_getInput_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getInput_presult& obj);
};

typedef struct _HardwareService_startPump_args__isset {
  _HardwareService_startPump_args__isset() : pumpId(false) {}
  bool pumpId :1;
} _HardwareService_startPump_args__isset;

class HardwareService_startPump_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HardwareService_startPump_args(const HardwareService_startPump_args&);
  HardwareService_startPump_args& operator=(const HardwareService_startPump_args&);
  HardwareService_startPump_args() : pumpId(0) {
  }

  virtual ~HardwareService_startPump_args() throw();
  int32_t pumpId;

  _HardwareService_startPump_args__isset __isset;

  void __set_pumpId(const int32_t val);

  bool operator == (const HardwareService_startPump_args & rhs) const
  {
    if (!(pumpId == rhs.pumpId))
      return false;
    return true;
  }
  bool operator != (const HardwareService_startPump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_startPump_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_args& obj);
};


class HardwareService_startPump_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~HardwareService_startPump_pargs() throw();
  const int32_t* pumpId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_pargs& obj);
};

typedef struct _HardwareService_startPump_result__isset {
  _HardwareService_startPump_result__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_startPump_result__isset;

class HardwareService_startPump_result {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};

  HardwareService_startPump_result(const HardwareService_startPump_result&);
  HardwareService_startPump_result& operator=(const HardwareService_startPump_result&);
  HardwareService_startPump_result() {
  }

  virtual ~HardwareService_startPump_result() throw();
  InvalidOperation ouch;

  _HardwareService_startPump_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_startPump_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_startPump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_startPump_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_result& obj);
};

typedef struct _HardwareService_startPump_presult__isset {
  _HardwareService_startPump_presult__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_startPump_presult__isset;

class HardwareService_startPump_presult {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};


  virtual ~HardwareService_startPump_presult() throw();
  InvalidOperation ouch;

  _HardwareService_startPump_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_presult& obj);
};

typedef struct _HardwareService_stopPump_args__isset {
  _HardwareService_stopPump_args__isset() : pumpId(false) {}
  bool pumpId :1;
} _HardwareService_stopPump_args__isset;

class HardwareService_stopPump_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HardwareService_stopPump_args(const HardwareService_stopPump_args&);
  HardwareService_stopPump_args& operator=(const HardwareService_stopPump_args&);
  HardwareService_stopPump_args() : pumpId(0) {
  }

  virtual ~HardwareService_stopPump_args() throw();
  int32_t pumpId;

  _HardwareService_stopPump_args__isset __isset;

  void __set_pumpId(const int32_t val);

  bool operator == (const HardwareService_stopPump_args & rhs) const
  {
    if (!(pumpId == rhs.pumpId))
      return false;
    return true;
  }
  bool operator != (const HardwareService_stopPump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_stopPump_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_args& obj);
};


class HardwareService_stopPump_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~HardwareService_stopPump_pargs() throw();
  const int32_t* pumpId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_pargs& obj);
};

typedef struct _HardwareService_stopPump_result__isset {
  _HardwareService_stopPump_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _HardwareService_stopPump_result__isset;

class HardwareService_stopPump_result {
 public:

  static const char* ascii_fingerprint; // = "0E3755C4848BC180B5320A302F311F65";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x37,0x55,0xC4,0x84,0x8B,0xC1,0x80,0xB5,0x32,0x0A,0x30,0x2F,0x31,0x1F,0x65};

  HardwareService_stopPump_result(const HardwareService_stopPump_result&);
  HardwareService_stopPump_result& operator=(const HardwareService_stopPump_result&);
  HardwareService_stopPump_result() {
  }

  virtual ~HardwareService_stopPump_result() throw();
  StopPumpResult success;
  InvalidOperation ouch;

  _HardwareService_stopPump_result__isset __isset;

  void __set_success(const StopPumpResult& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_stopPump_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_stopPump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_stopPump_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_result& obj);
};

typedef struct _HardwareService_stopPump_presult__isset {
  _HardwareService_stopPump_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _HardwareService_stopPump_presult__isset;

class HardwareService_stopPump_presult {
 public:

  static const char* ascii_fingerprint; // = "0E3755C4848BC180B5320A302F311F65";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x37,0x55,0xC4,0x84,0x8B,0xC1,0x80,0xB5,0x32,0x0A,0x30,0x2F,0x31,0x1F,0x65};


  virtual ~HardwareService_stopPump_presult() throw();
  StopPumpResult* success;
  InvalidOperation ouch;

  _HardwareService_stopPump_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_presult& obj);
};


class HardwareService_getServiceStatus_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HardwareService_getServiceStatus_args(const HardwareService_getServiceStatus_args&);
  HardwareService_getServiceStatus_args& operator=(const HardwareService_getServiceStatus_args&);
  HardwareService_getServiceStatus_args() {
  }

  virtual ~HardwareService_getServiceStatus_args() throw();

  bool operator == (const HardwareService_getServiceStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HardwareService_getServiceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getServiceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_args& obj);
};


class HardwareService_getServiceStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HardwareService_getServiceStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_pargs& obj);
};

typedef struct _HardwareService_getServiceStatus_result__isset {
  _HardwareService_getServiceStatus_result__isset() : success(false) {}
  bool success :1;
} _HardwareService_getServiceStatus_result__isset;

class HardwareService_getServiceStatus_result {
 public:

  static const char* ascii_fingerprint; // = "AE16B3B80C3AE2A38B3A45447ED828F6";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x16,0xB3,0xB8,0x0C,0x3A,0xE2,0xA3,0x8B,0x3A,0x45,0x44,0x7E,0xD8,0x28,0xF6};

  HardwareService_getServiceStatus_result(const HardwareService_getServiceStatus_result&);
  HardwareService_getServiceStatus_result& operator=(const HardwareService_getServiceStatus_result&);
  HardwareService_getServiceStatus_result() {
  }

  virtual ~HardwareService_getServiceStatus_result() throw();
  ServiceStatus success;

  _HardwareService_getServiceStatus_result__isset __isset;

  void __set_success(const ServiceStatus& val);

  bool operator == (const HardwareService_getServiceStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HardwareService_getServiceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getServiceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_result& obj);
};

typedef struct _HardwareService_getServiceStatus_presult__isset {
  _HardwareService_getServiceStatus_presult__isset() : success(false) {}
  bool success :1;
} _HardwareService_getServiceStatus_presult__isset;

class HardwareService_getServiceStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "AE16B3B80C3AE2A38B3A45447ED828F6";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x16,0xB3,0xB8,0x0C,0x3A,0xE2,0xA3,0x8B,0x3A,0x45,0x44,0x7E,0xD8,0x28,0xF6};


  virtual ~HardwareService_getServiceStatus_presult() throw();
  ServiceStatus* success;

  _HardwareService_getServiceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_presult& obj);
};

typedef struct _HardwareService_ping_args__isset {
  _HardwareService_ping_args__isset() : arg(false) {}
  bool arg :1;
} _HardwareService_ping_args__isset;

class HardwareService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HardwareService_ping_args(const HardwareService_ping_args&);
  HardwareService_ping_args& operator=(const HardwareService_ping_args&);
  HardwareService_ping_args() : arg(0) {
  }

  virtual ~HardwareService_ping_args() throw();
  int32_t arg;

  _HardwareService_ping_args__isset __isset;

  void __set_arg(const int32_t val);

  bool operator == (const HardwareService_ping_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const HardwareService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_ping_args& obj);
};


class HardwareService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~HardwareService_ping_pargs() throw();
  const int32_t* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_ping_pargs& obj);
};


class HardwareService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HardwareService_ping_result(const HardwareService_ping_result&);
  HardwareService_ping_result& operator=(const HardwareService_ping_result&);
  HardwareService_ping_result() {
  }

  virtual ~HardwareService_ping_result() throw();

  bool operator == (const HardwareService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HardwareService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_ping_result& obj);
};


class HardwareService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HardwareService_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_ping_presult& obj);
};

class HardwareServiceClient : virtual public HardwareServiceIf {
 public:
  HardwareServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HardwareServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void configure(const std::string& jsonDocumentText);
  void send_configure(const std::string& jsonDocumentText);
  void recv_configure();
  void pour(const Container::type from, const Container::type to);
  void send_pour(const Container::type from, const Container::type to);
  void recv_pour();
  void getInput(HardwareInput& _return);
  void send_getInput();
  void recv_getInput(HardwareInput& _return);
  void startPump(const int32_t pumpId);
  void send_startPump(const int32_t pumpId);
  void recv_startPump();
  void stopPump(StopPumpResult& _return, const int32_t pumpId);
  void send_stopPump(const int32_t pumpId);
  void recv_stopPump(StopPumpResult& _return);
  void getServiceStatus(ServiceStatus& _return);
  void send_getServiceStatus();
  void recv_getServiceStatus(ServiceStatus& _return);
  void ping(const int32_t arg);
  void send_ping(const int32_t arg);
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HardwareServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HardwareServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HardwareServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_configure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pour(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getInput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startPump(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopPump(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HardwareServiceProcessor(boost::shared_ptr<HardwareServiceIf> iface) :
    iface_(iface) {
    processMap_["configure"] = &HardwareServiceProcessor::process_configure;
    processMap_["pour"] = &HardwareServiceProcessor::process_pour;
    processMap_["getInput"] = &HardwareServiceProcessor::process_getInput;
    processMap_["startPump"] = &HardwareServiceProcessor::process_startPump;
    processMap_["stopPump"] = &HardwareServiceProcessor::process_stopPump;
    processMap_["getServiceStatus"] = &HardwareServiceProcessor::process_getServiceStatus;
    processMap_["ping"] = &HardwareServiceProcessor::process_ping;
  }

  virtual ~HardwareServiceProcessor() {}
};

class HardwareServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HardwareServiceProcessorFactory(const ::boost::shared_ptr< HardwareServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HardwareServiceIfFactory > handlerFactory_;
};

class HardwareServiceMultiface : virtual public HardwareServiceIf {
 public:
  HardwareServiceMultiface(std::vector<boost::shared_ptr<HardwareServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HardwareServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HardwareServiceIf> > ifaces_;
  HardwareServiceMultiface() {}
  void add(boost::shared_ptr<HardwareServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void configure(const std::string& jsonDocumentText) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->configure(jsonDocumentText);
    }
    ifaces_[i]->configure(jsonDocumentText);
  }

  void pour(const Container::type from, const Container::type to) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pour(from, to);
    }
    ifaces_[i]->pour(from, to);
  }

  void getInput(HardwareInput& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInput(_return);
    }
    ifaces_[i]->getInput(_return);
    return;
  }

  void startPump(const int32_t pumpId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startPump(pumpId);
    }
    ifaces_[i]->startPump(pumpId);
  }

  void stopPump(StopPumpResult& _return, const int32_t pumpId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopPump(_return, pumpId);
    }
    ifaces_[i]->stopPump(_return, pumpId);
    return;
  }

  void getServiceStatus(ServiceStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceStatus(_return);
    }
    ifaces_[i]->getServiceStatus(_return);
    return;
  }

  void ping(const int32_t arg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(arg);
    }
    ifaces_[i]->ping(arg);
  }

};

} // namespace

#endif
