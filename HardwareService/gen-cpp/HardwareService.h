/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HardwareService_H
#define HardwareService_H

#include <thrift/TDispatchProcessor.h>
#include "HardwareService_types.h"

namespace Tabletochki {

class HardwareServiceIf {
 public:
  virtual ~HardwareServiceIf() {}
  virtual void applyConfiguration(const std::string& jsonDocumentText) = 0;
  virtual void startPump(const PumpIdentifier::type pumpId) = 0;
  virtual void stopPump(StopPumpResult& _return, const PumpIdentifier::type pumpId) = 0;
  virtual void getServiceStatus(ServiceStatus& _return) = 0;
  virtual void getServiceStateJson(std::string& _return) = 0;
  virtual void fillVisibleContainerMillilitres(const int32_t amount) = 0;
  virtual void emptyVisiableContainerMillilitres(const int32_t amount) = 0;
};

class HardwareServiceIfFactory {
 public:
  typedef HardwareServiceIf Handler;

  virtual ~HardwareServiceIfFactory() {}

  virtual HardwareServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HardwareServiceIf* /* handler */) = 0;
};

class HardwareServiceIfSingletonFactory : virtual public HardwareServiceIfFactory {
 public:
  HardwareServiceIfSingletonFactory(const boost::shared_ptr<HardwareServiceIf>& iface) : iface_(iface) {}
  virtual ~HardwareServiceIfSingletonFactory() {}

  virtual HardwareServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HardwareServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HardwareServiceIf> iface_;
};

class HardwareServiceNull : virtual public HardwareServiceIf {
 public:
  virtual ~HardwareServiceNull() {}
  void applyConfiguration(const std::string& /* jsonDocumentText */) {
    return;
  }
  void startPump(const PumpIdentifier::type /* pumpId */) {
    return;
  }
  void stopPump(StopPumpResult& /* _return */, const PumpIdentifier::type /* pumpId */) {
    return;
  }
  void getServiceStatus(ServiceStatus& /* _return */) {
    return;
  }
  void getServiceStateJson(std::string& /* _return */) {
    return;
  }
  void fillVisibleContainerMillilitres(const int32_t /* amount */) {
    return;
  }
  void emptyVisiableContainerMillilitres(const int32_t /* amount */) {
    return;
  }
};

typedef struct _HardwareService_applyConfiguration_args__isset {
  _HardwareService_applyConfiguration_args__isset() : jsonDocumentText(false) {}
  bool jsonDocumentText :1;
} _HardwareService_applyConfiguration_args__isset;

class HardwareService_applyConfiguration_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  HardwareService_applyConfiguration_args(const HardwareService_applyConfiguration_args&);
  HardwareService_applyConfiguration_args& operator=(const HardwareService_applyConfiguration_args&);
  HardwareService_applyConfiguration_args() : jsonDocumentText() {
  }

  virtual ~HardwareService_applyConfiguration_args() throw();
  std::string jsonDocumentText;

  _HardwareService_applyConfiguration_args__isset __isset;

  void __set_jsonDocumentText(const std::string& val);

  bool operator == (const HardwareService_applyConfiguration_args & rhs) const
  {
    if (!(jsonDocumentText == rhs.jsonDocumentText))
      return false;
    return true;
  }
  bool operator != (const HardwareService_applyConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_applyConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_applyConfiguration_args& obj);
};


class HardwareService_applyConfiguration_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~HardwareService_applyConfiguration_pargs() throw();
  const std::string* jsonDocumentText;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_applyConfiguration_pargs& obj);
};

typedef struct _HardwareService_applyConfiguration_result__isset {
  _HardwareService_applyConfiguration_result__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_applyConfiguration_result__isset;

class HardwareService_applyConfiguration_result {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};

  HardwareService_applyConfiguration_result(const HardwareService_applyConfiguration_result&);
  HardwareService_applyConfiguration_result& operator=(const HardwareService_applyConfiguration_result&);
  HardwareService_applyConfiguration_result() {
  }

  virtual ~HardwareService_applyConfiguration_result() throw();
  InvalidOperation ouch;

  _HardwareService_applyConfiguration_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_applyConfiguration_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_applyConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_applyConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_applyConfiguration_result& obj);
};

typedef struct _HardwareService_applyConfiguration_presult__isset {
  _HardwareService_applyConfiguration_presult__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_applyConfiguration_presult__isset;

class HardwareService_applyConfiguration_presult {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};


  virtual ~HardwareService_applyConfiguration_presult() throw();
  InvalidOperation ouch;

  _HardwareService_applyConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_applyConfiguration_presult& obj);
};

typedef struct _HardwareService_startPump_args__isset {
  _HardwareService_startPump_args__isset() : pumpId(false) {}
  bool pumpId :1;
} _HardwareService_startPump_args__isset;

class HardwareService_startPump_args {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  HardwareService_startPump_args(const HardwareService_startPump_args&);
  HardwareService_startPump_args& operator=(const HardwareService_startPump_args&);
  HardwareService_startPump_args() : pumpId((PumpIdentifier::type)0) {
  }

  virtual ~HardwareService_startPump_args() throw();
  PumpIdentifier::type pumpId;

  _HardwareService_startPump_args__isset __isset;

  void __set_pumpId(const PumpIdentifier::type val);

  bool operator == (const HardwareService_startPump_args & rhs) const
  {
    if (!(pumpId == rhs.pumpId))
      return false;
    return true;
  }
  bool operator != (const HardwareService_startPump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_startPump_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_args& obj);
};


class HardwareService_startPump_pargs {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};


  virtual ~HardwareService_startPump_pargs() throw();
  const PumpIdentifier::type* pumpId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_pargs& obj);
};

typedef struct _HardwareService_startPump_result__isset {
  _HardwareService_startPump_result__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_startPump_result__isset;

class HardwareService_startPump_result {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};

  HardwareService_startPump_result(const HardwareService_startPump_result&);
  HardwareService_startPump_result& operator=(const HardwareService_startPump_result&);
  HardwareService_startPump_result() {
  }

  virtual ~HardwareService_startPump_result() throw();
  InvalidOperation ouch;

  _HardwareService_startPump_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_startPump_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_startPump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_startPump_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_result& obj);
};

typedef struct _HardwareService_startPump_presult__isset {
  _HardwareService_startPump_presult__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_startPump_presult__isset;

class HardwareService_startPump_presult {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};


  virtual ~HardwareService_startPump_presult() throw();
  InvalidOperation ouch;

  _HardwareService_startPump_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_startPump_presult& obj);
};

typedef struct _HardwareService_stopPump_args__isset {
  _HardwareService_stopPump_args__isset() : pumpId(false) {}
  bool pumpId :1;
} _HardwareService_stopPump_args__isset;

class HardwareService_stopPump_args {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  HardwareService_stopPump_args(const HardwareService_stopPump_args&);
  HardwareService_stopPump_args& operator=(const HardwareService_stopPump_args&);
  HardwareService_stopPump_args() : pumpId((PumpIdentifier::type)0) {
  }

  virtual ~HardwareService_stopPump_args() throw();
  PumpIdentifier::type pumpId;

  _HardwareService_stopPump_args__isset __isset;

  void __set_pumpId(const PumpIdentifier::type val);

  bool operator == (const HardwareService_stopPump_args & rhs) const
  {
    if (!(pumpId == rhs.pumpId))
      return false;
    return true;
  }
  bool operator != (const HardwareService_stopPump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_stopPump_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_args& obj);
};


class HardwareService_stopPump_pargs {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};


  virtual ~HardwareService_stopPump_pargs() throw();
  const PumpIdentifier::type* pumpId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_pargs& obj);
};

typedef struct _HardwareService_stopPump_result__isset {
  _HardwareService_stopPump_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _HardwareService_stopPump_result__isset;

class HardwareService_stopPump_result {
 public:

  static const char* ascii_fingerprint; // = "0E3755C4848BC180B5320A302F311F65";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x37,0x55,0xC4,0x84,0x8B,0xC1,0x80,0xB5,0x32,0x0A,0x30,0x2F,0x31,0x1F,0x65};

  HardwareService_stopPump_result(const HardwareService_stopPump_result&);
  HardwareService_stopPump_result& operator=(const HardwareService_stopPump_result&);
  HardwareService_stopPump_result() {
  }

  virtual ~HardwareService_stopPump_result() throw();
  StopPumpResult success;
  InvalidOperation ouch;

  _HardwareService_stopPump_result__isset __isset;

  void __set_success(const StopPumpResult& val);

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_stopPump_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_stopPump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_stopPump_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_result& obj);
};

typedef struct _HardwareService_stopPump_presult__isset {
  _HardwareService_stopPump_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _HardwareService_stopPump_presult__isset;

class HardwareService_stopPump_presult {
 public:

  static const char* ascii_fingerprint; // = "0E3755C4848BC180B5320A302F311F65";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x37,0x55,0xC4,0x84,0x8B,0xC1,0x80,0xB5,0x32,0x0A,0x30,0x2F,0x31,0x1F,0x65};


  virtual ~HardwareService_stopPump_presult() throw();
  StopPumpResult* success;
  InvalidOperation ouch;

  _HardwareService_stopPump_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_stopPump_presult& obj);
};


class HardwareService_getServiceStatus_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HardwareService_getServiceStatus_args(const HardwareService_getServiceStatus_args&);
  HardwareService_getServiceStatus_args& operator=(const HardwareService_getServiceStatus_args&);
  HardwareService_getServiceStatus_args() {
  }

  virtual ~HardwareService_getServiceStatus_args() throw();

  bool operator == (const HardwareService_getServiceStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HardwareService_getServiceStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getServiceStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_args& obj);
};


class HardwareService_getServiceStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HardwareService_getServiceStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_pargs& obj);
};

typedef struct _HardwareService_getServiceStatus_result__isset {
  _HardwareService_getServiceStatus_result__isset() : success(false) {}
  bool success :1;
} _HardwareService_getServiceStatus_result__isset;

class HardwareService_getServiceStatus_result {
 public:

  static const char* ascii_fingerprint; // = "AE16B3B80C3AE2A38B3A45447ED828F6";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x16,0xB3,0xB8,0x0C,0x3A,0xE2,0xA3,0x8B,0x3A,0x45,0x44,0x7E,0xD8,0x28,0xF6};

  HardwareService_getServiceStatus_result(const HardwareService_getServiceStatus_result&);
  HardwareService_getServiceStatus_result& operator=(const HardwareService_getServiceStatus_result&);
  HardwareService_getServiceStatus_result() {
  }

  virtual ~HardwareService_getServiceStatus_result() throw();
  ServiceStatus success;

  _HardwareService_getServiceStatus_result__isset __isset;

  void __set_success(const ServiceStatus& val);

  bool operator == (const HardwareService_getServiceStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HardwareService_getServiceStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getServiceStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_result& obj);
};

typedef struct _HardwareService_getServiceStatus_presult__isset {
  _HardwareService_getServiceStatus_presult__isset() : success(false) {}
  bool success :1;
} _HardwareService_getServiceStatus_presult__isset;

class HardwareService_getServiceStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "AE16B3B80C3AE2A38B3A45447ED828F6";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x16,0xB3,0xB8,0x0C,0x3A,0xE2,0xA3,0x8B,0x3A,0x45,0x44,0x7E,0xD8,0x28,0xF6};


  virtual ~HardwareService_getServiceStatus_presult() throw();
  ServiceStatus* success;

  _HardwareService_getServiceStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStatus_presult& obj);
};


class HardwareService_getServiceStateJson_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HardwareService_getServiceStateJson_args(const HardwareService_getServiceStateJson_args&);
  HardwareService_getServiceStateJson_args& operator=(const HardwareService_getServiceStateJson_args&);
  HardwareService_getServiceStateJson_args() {
  }

  virtual ~HardwareService_getServiceStateJson_args() throw();

  bool operator == (const HardwareService_getServiceStateJson_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HardwareService_getServiceStateJson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getServiceStateJson_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStateJson_args& obj);
};


class HardwareService_getServiceStateJson_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HardwareService_getServiceStateJson_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStateJson_pargs& obj);
};

typedef struct _HardwareService_getServiceStateJson_result__isset {
  _HardwareService_getServiceStateJson_result__isset() : success(false) {}
  bool success :1;
} _HardwareService_getServiceStateJson_result__isset;

class HardwareService_getServiceStateJson_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  HardwareService_getServiceStateJson_result(const HardwareService_getServiceStateJson_result&);
  HardwareService_getServiceStateJson_result& operator=(const HardwareService_getServiceStateJson_result&);
  HardwareService_getServiceStateJson_result() : success() {
  }

  virtual ~HardwareService_getServiceStateJson_result() throw();
  std::string success;

  _HardwareService_getServiceStateJson_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const HardwareService_getServiceStateJson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HardwareService_getServiceStateJson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_getServiceStateJson_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStateJson_result& obj);
};

typedef struct _HardwareService_getServiceStateJson_presult__isset {
  _HardwareService_getServiceStateJson_presult__isset() : success(false) {}
  bool success :1;
} _HardwareService_getServiceStateJson_presult__isset;

class HardwareService_getServiceStateJson_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~HardwareService_getServiceStateJson_presult() throw();
  std::string* success;

  _HardwareService_getServiceStateJson_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_getServiceStateJson_presult& obj);
};

typedef struct _HardwareService_fillVisibleContainerMillilitres_args__isset {
  _HardwareService_fillVisibleContainerMillilitres_args__isset() : amount(false) {}
  bool amount :1;
} _HardwareService_fillVisibleContainerMillilitres_args__isset;

class HardwareService_fillVisibleContainerMillilitres_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HardwareService_fillVisibleContainerMillilitres_args(const HardwareService_fillVisibleContainerMillilitres_args&);
  HardwareService_fillVisibleContainerMillilitres_args& operator=(const HardwareService_fillVisibleContainerMillilitres_args&);
  HardwareService_fillVisibleContainerMillilitres_args() : amount(0) {
  }

  virtual ~HardwareService_fillVisibleContainerMillilitres_args() throw();
  int32_t amount;

  _HardwareService_fillVisibleContainerMillilitres_args__isset __isset;

  void __set_amount(const int32_t val);

  bool operator == (const HardwareService_fillVisibleContainerMillilitres_args & rhs) const
  {
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const HardwareService_fillVisibleContainerMillilitres_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_fillVisibleContainerMillilitres_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_fillVisibleContainerMillilitres_args& obj);
};


class HardwareService_fillVisibleContainerMillilitres_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~HardwareService_fillVisibleContainerMillilitres_pargs() throw();
  const int32_t* amount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_fillVisibleContainerMillilitres_pargs& obj);
};

typedef struct _HardwareService_fillVisibleContainerMillilitres_result__isset {
  _HardwareService_fillVisibleContainerMillilitres_result__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_fillVisibleContainerMillilitres_result__isset;

class HardwareService_fillVisibleContainerMillilitres_result {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};

  HardwareService_fillVisibleContainerMillilitres_result(const HardwareService_fillVisibleContainerMillilitres_result&);
  HardwareService_fillVisibleContainerMillilitres_result& operator=(const HardwareService_fillVisibleContainerMillilitres_result&);
  HardwareService_fillVisibleContainerMillilitres_result() {
  }

  virtual ~HardwareService_fillVisibleContainerMillilitres_result() throw();
  InvalidOperation ouch;

  _HardwareService_fillVisibleContainerMillilitres_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_fillVisibleContainerMillilitres_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_fillVisibleContainerMillilitres_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_fillVisibleContainerMillilitres_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_fillVisibleContainerMillilitres_result& obj);
};

typedef struct _HardwareService_fillVisibleContainerMillilitres_presult__isset {
  _HardwareService_fillVisibleContainerMillilitres_presult__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_fillVisibleContainerMillilitres_presult__isset;

class HardwareService_fillVisibleContainerMillilitres_presult {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};


  virtual ~HardwareService_fillVisibleContainerMillilitres_presult() throw();
  InvalidOperation ouch;

  _HardwareService_fillVisibleContainerMillilitres_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_fillVisibleContainerMillilitres_presult& obj);
};

typedef struct _HardwareService_emptyVisiableContainerMillilitres_args__isset {
  _HardwareService_emptyVisiableContainerMillilitres_args__isset() : amount(false) {}
  bool amount :1;
} _HardwareService_emptyVisiableContainerMillilitres_args__isset;

class HardwareService_emptyVisiableContainerMillilitres_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  HardwareService_emptyVisiableContainerMillilitres_args(const HardwareService_emptyVisiableContainerMillilitres_args&);
  HardwareService_emptyVisiableContainerMillilitres_args& operator=(const HardwareService_emptyVisiableContainerMillilitres_args&);
  HardwareService_emptyVisiableContainerMillilitres_args() : amount(0) {
  }

  virtual ~HardwareService_emptyVisiableContainerMillilitres_args() throw();
  int32_t amount;

  _HardwareService_emptyVisiableContainerMillilitres_args__isset __isset;

  void __set_amount(const int32_t val);

  bool operator == (const HardwareService_emptyVisiableContainerMillilitres_args & rhs) const
  {
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const HardwareService_emptyVisiableContainerMillilitres_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_emptyVisiableContainerMillilitres_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_emptyVisiableContainerMillilitres_args& obj);
};


class HardwareService_emptyVisiableContainerMillilitres_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~HardwareService_emptyVisiableContainerMillilitres_pargs() throw();
  const int32_t* amount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_emptyVisiableContainerMillilitres_pargs& obj);
};

typedef struct _HardwareService_emptyVisiableContainerMillilitres_result__isset {
  _HardwareService_emptyVisiableContainerMillilitres_result__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_emptyVisiableContainerMillilitres_result__isset;

class HardwareService_emptyVisiableContainerMillilitres_result {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};

  HardwareService_emptyVisiableContainerMillilitres_result(const HardwareService_emptyVisiableContainerMillilitres_result&);
  HardwareService_emptyVisiableContainerMillilitres_result& operator=(const HardwareService_emptyVisiableContainerMillilitres_result&);
  HardwareService_emptyVisiableContainerMillilitres_result() {
  }

  virtual ~HardwareService_emptyVisiableContainerMillilitres_result() throw();
  InvalidOperation ouch;

  _HardwareService_emptyVisiableContainerMillilitres_result__isset __isset;

  void __set_ouch(const InvalidOperation& val);

  bool operator == (const HardwareService_emptyVisiableContainerMillilitres_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const HardwareService_emptyVisiableContainerMillilitres_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HardwareService_emptyVisiableContainerMillilitres_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_emptyVisiableContainerMillilitres_result& obj);
};

typedef struct _HardwareService_emptyVisiableContainerMillilitres_presult__isset {
  _HardwareService_emptyVisiableContainerMillilitres_presult__isset() : ouch(false) {}
  bool ouch :1;
} _HardwareService_emptyVisiableContainerMillilitres_presult__isset;

class HardwareService_emptyVisiableContainerMillilitres_presult {
 public:

  static const char* ascii_fingerprint; // = "75163450D5D62165E86860A3D30E517A";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x16,0x34,0x50,0xD5,0xD6,0x21,0x65,0xE8,0x68,0x60,0xA3,0xD3,0x0E,0x51,0x7A};


  virtual ~HardwareService_emptyVisiableContainerMillilitres_presult() throw();
  InvalidOperation ouch;

  _HardwareService_emptyVisiableContainerMillilitres_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HardwareService_emptyVisiableContainerMillilitres_presult& obj);
};

class HardwareServiceClient : virtual public HardwareServiceIf {
 public:
  HardwareServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HardwareServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void applyConfiguration(const std::string& jsonDocumentText);
  void send_applyConfiguration(const std::string& jsonDocumentText);
  void recv_applyConfiguration();
  void startPump(const PumpIdentifier::type pumpId);
  void send_startPump(const PumpIdentifier::type pumpId);
  void recv_startPump();
  void stopPump(StopPumpResult& _return, const PumpIdentifier::type pumpId);
  void send_stopPump(const PumpIdentifier::type pumpId);
  void recv_stopPump(StopPumpResult& _return);
  void getServiceStatus(ServiceStatus& _return);
  void send_getServiceStatus();
  void recv_getServiceStatus(ServiceStatus& _return);
  void getServiceStateJson(std::string& _return);
  void send_getServiceStateJson();
  void recv_getServiceStateJson(std::string& _return);
  void fillVisibleContainerMillilitres(const int32_t amount);
  void send_fillVisibleContainerMillilitres(const int32_t amount);
  void recv_fillVisibleContainerMillilitres();
  void emptyVisiableContainerMillilitres(const int32_t amount);
  void send_emptyVisiableContainerMillilitres(const int32_t amount);
  void recv_emptyVisiableContainerMillilitres();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HardwareServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HardwareServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HardwareServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_applyConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startPump(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopPump(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceStateJson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fillVisibleContainerMillilitres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_emptyVisiableContainerMillilitres(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HardwareServiceProcessor(boost::shared_ptr<HardwareServiceIf> iface) :
    iface_(iface) {
    processMap_["applyConfiguration"] = &HardwareServiceProcessor::process_applyConfiguration;
    processMap_["startPump"] = &HardwareServiceProcessor::process_startPump;
    processMap_["stopPump"] = &HardwareServiceProcessor::process_stopPump;
    processMap_["getServiceStatus"] = &HardwareServiceProcessor::process_getServiceStatus;
    processMap_["getServiceStateJson"] = &HardwareServiceProcessor::process_getServiceStateJson;
    processMap_["fillVisibleContainerMillilitres"] = &HardwareServiceProcessor::process_fillVisibleContainerMillilitres;
    processMap_["emptyVisiableContainerMillilitres"] = &HardwareServiceProcessor::process_emptyVisiableContainerMillilitres;
  }

  virtual ~HardwareServiceProcessor() {}
};

class HardwareServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HardwareServiceProcessorFactory(const ::boost::shared_ptr< HardwareServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HardwareServiceIfFactory > handlerFactory_;
};

class HardwareServiceMultiface : virtual public HardwareServiceIf {
 public:
  HardwareServiceMultiface(std::vector<boost::shared_ptr<HardwareServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HardwareServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HardwareServiceIf> > ifaces_;
  HardwareServiceMultiface() {}
  void add(boost::shared_ptr<HardwareServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void applyConfiguration(const std::string& jsonDocumentText) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->applyConfiguration(jsonDocumentText);
    }
    ifaces_[i]->applyConfiguration(jsonDocumentText);
  }

  void startPump(const PumpIdentifier::type pumpId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startPump(pumpId);
    }
    ifaces_[i]->startPump(pumpId);
  }

  void stopPump(StopPumpResult& _return, const PumpIdentifier::type pumpId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopPump(_return, pumpId);
    }
    ifaces_[i]->stopPump(_return, pumpId);
    return;
  }

  void getServiceStatus(ServiceStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceStatus(_return);
    }
    ifaces_[i]->getServiceStatus(_return);
    return;
  }

  void getServiceStateJson(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceStateJson(_return);
    }
    ifaces_[i]->getServiceStateJson(_return);
    return;
  }

  void fillVisibleContainerMillilitres(const int32_t amount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fillVisibleContainerMillilitres(amount);
    }
    ifaces_[i]->fillVisibleContainerMillilitres(amount);
  }

  void emptyVisiableContainerMillilitres(const int32_t amount) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->emptyVisiableContainerMillilitres(amount);
    }
    ifaces_[i]->emptyVisiableContainerMillilitres(amount);
  }

};

} // namespace

#endif
