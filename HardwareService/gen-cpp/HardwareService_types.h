/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HardwareService_TYPES_H
#define HardwareService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Tabletochki {

struct ErrorCode {
  enum type {
    INVALID_CONFIGURATION = 0,
    DEVICE_ALREADY_IN_USE = 1,
    SERVICE_NOT_READY = 2,
    DEVICE_NOT_READY = 3,
    PUMP_NOT_READY = 4
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct PumpIdentifier {
  enum type {
    INPUT_PUMP = 0,
    OUTPUT_PUMP = 1
  };
};

extern const std::map<int, const char*> _PumpIdentifier_VALUES_TO_NAMES;

class InvalidOperation;

class StopPumpResult;

class ServiceStatus;

typedef struct _InvalidOperation__isset {
  _InvalidOperation__isset() : what(false), why(false) {}
  bool what :1;
  bool why :1;
} _InvalidOperation__isset;

class InvalidOperation : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  InvalidOperation(const InvalidOperation&);
  InvalidOperation& operator=(const InvalidOperation&);
  InvalidOperation() : what((ErrorCode::type)0), why() {
  }

  virtual ~InvalidOperation() throw();
  ErrorCode::type what;
  std::string why;

  _InvalidOperation__isset __isset;

  void __set_what(const ErrorCode::type val);

  void __set_why(const std::string& val);

  bool operator == (const InvalidOperation & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const InvalidOperation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidOperation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj);
};

void swap(InvalidOperation &a, InvalidOperation &b);

typedef struct _StopPumpResult__isset {
  _StopPumpResult__isset() : workingTimeSecond(false) {}
  bool workingTimeSecond :1;
} _StopPumpResult__isset;

class StopPumpResult {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  StopPumpResult(const StopPumpResult&);
  StopPumpResult& operator=(const StopPumpResult&);
  StopPumpResult() : workingTimeSecond(0) {
  }

  virtual ~StopPumpResult() throw();
  int32_t workingTimeSecond;

  _StopPumpResult__isset __isset;

  void __set_workingTimeSecond(const int32_t val);

  bool operator == (const StopPumpResult & rhs) const
  {
    if (!(workingTimeSecond == rhs.workingTimeSecond))
      return false;
    return true;
  }
  bool operator != (const StopPumpResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StopPumpResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const StopPumpResult& obj);
};

void swap(StopPumpResult &a, StopPumpResult &b);

typedef struct _ServiceStatus__isset {
  _ServiceStatus__isset() : statusCode(false) {}
  bool statusCode :1;
} _ServiceStatus__isset;

class ServiceStatus {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ServiceStatus(const ServiceStatus&);
  ServiceStatus& operator=(const ServiceStatus&);
  ServiceStatus() : statusCode(0) {
  }

  virtual ~ServiceStatus() throw();
  int32_t statusCode;

  _ServiceStatus__isset __isset;

  void __set_statusCode(const int32_t val);

  bool operator == (const ServiceStatus & rhs) const
  {
    if (!(statusCode == rhs.statusCode))
      return false;
    return true;
  }
  bool operator != (const ServiceStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServiceStatus& obj);
};

void swap(ServiceStatus &a, ServiceStatus &b);

} // namespace

#endif
