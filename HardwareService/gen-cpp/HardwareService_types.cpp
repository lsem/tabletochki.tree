/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "HardwareService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Tabletochki {

int _kErrorCodeValues[] = {
  ErrorCode::INVALID_CONFIGURATION,
  ErrorCode::DEVICE_ALREADY_IN_USE,
  ErrorCode::SERVICE_NOT_READY,
  ErrorCode::DEVICE_NOT_READY,
  ErrorCode::PUMP_NOT_READY
};
const char* _kErrorCodeNames[] = {
  "INVALID_CONFIGURATION",
  "DEVICE_ALREADY_IN_USE",
  "SERVICE_NOT_READY",
  "DEVICE_NOT_READY",
  "PUMP_NOT_READY"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPumpIdentifierValues[] = {
  PumpIdentifier::INPUT_PUMP,
  PumpIdentifier::OUTPUT_PUMP
};
const char* _kPumpIdentifierNames[] = {
  "INPUT_PUMP",
  "OUTPUT_PUMP"
};
const std::map<int, const char*> _PumpIdentifier_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPumpIdentifierValues, _kPumpIdentifierNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


InvalidOperation::~InvalidOperation() throw() {
}


void InvalidOperation::__set_what(const ErrorCode::type val) {
  this->what = val;
}

void InvalidOperation::__set_why(const std::string& val) {
  this->why = val;
}

const char* InvalidOperation::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t InvalidOperation::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t InvalidOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->what = (ErrorCode::type)ecast0;
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InvalidOperation");

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InvalidOperation &a, InvalidOperation &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

InvalidOperation::InvalidOperation(const InvalidOperation& other1) : TException() {
  what = other1.what;
  why = other1.why;
  __isset = other1.__isset;
}
InvalidOperation& InvalidOperation::operator=(const InvalidOperation& other2) {
  what = other2.what;
  why = other2.why;
  __isset = other2.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InvalidOperation& obj) {
  using apache::thrift::to_string;
  out << "InvalidOperation(";
  out << "what=" << to_string(obj.what);
  out << ", " << "why=" << to_string(obj.why);
  out << ")";
  return out;
}


StopPumpResult::~StopPumpResult() throw() {
}


void StopPumpResult::__set_workingTimeSecond(const int32_t val) {
  this->workingTimeSecond = val;
}

const char* StopPumpResult::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t StopPumpResult::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t StopPumpResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->workingTimeSecond);
          this->__isset.workingTimeSecond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StopPumpResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("StopPumpResult");

  xfer += oprot->writeFieldBegin("workingTimeSecond", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->workingTimeSecond);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(StopPumpResult &a, StopPumpResult &b) {
  using ::std::swap;
  swap(a.workingTimeSecond, b.workingTimeSecond);
  swap(a.__isset, b.__isset);
}

StopPumpResult::StopPumpResult(const StopPumpResult& other3) {
  workingTimeSecond = other3.workingTimeSecond;
  __isset = other3.__isset;
}
StopPumpResult& StopPumpResult::operator=(const StopPumpResult& other4) {
  workingTimeSecond = other4.workingTimeSecond;
  __isset = other4.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const StopPumpResult& obj) {
  using apache::thrift::to_string;
  out << "StopPumpResult(";
  out << "workingTimeSecond=" << to_string(obj.workingTimeSecond);
  out << ")";
  return out;
}


ServiceStatus::~ServiceStatus() throw() {
}


void ServiceStatus::__set_statusCode(const int32_t val) {
  this->statusCode = val;
}

const char* ServiceStatus::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t ServiceStatus::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t ServiceStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->statusCode);
          this->__isset.statusCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ServiceStatus");

  xfer += oprot->writeFieldBegin("statusCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->statusCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ServiceStatus &a, ServiceStatus &b) {
  using ::std::swap;
  swap(a.statusCode, b.statusCode);
  swap(a.__isset, b.__isset);
}

ServiceStatus::ServiceStatus(const ServiceStatus& other5) {
  statusCode = other5.statusCode;
  __isset = other5.__isset;
}
ServiceStatus& ServiceStatus::operator=(const ServiceStatus& other6) {
  statusCode = other6.statusCode;
  __isset = other6.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ServiceStatus& obj) {
  using apache::thrift::to_string;
  out << "ServiceStatus(";
  out << "statusCode=" << to_string(obj.statusCode);
  out << ")";
  return out;
}

} // namespace
